// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserErrorServiceClient is the client API for UserErrorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserErrorServiceClient interface {
	SaveUserLogs(ctx context.Context, in *UserErrorRequest, opts ...grpc.CallOption) (*UserErrorResponse, error)
	GetUserLogs(ctx context.Context, in *Null, opts ...grpc.CallOption) (*UserLogResp, error)
}

type userErrorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserErrorServiceClient(cc grpc.ClientConnInterface) UserErrorServiceClient {
	return &userErrorServiceClient{cc}
}

func (c *userErrorServiceClient) SaveUserLogs(ctx context.Context, in *UserErrorRequest, opts ...grpc.CallOption) (*UserErrorResponse, error) {
	out := new(UserErrorResponse)
	err := c.cc.Invoke(ctx, "/UserErrorService/SaveUserLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userErrorServiceClient) GetUserLogs(ctx context.Context, in *Null, opts ...grpc.CallOption) (*UserLogResp, error) {
	out := new(UserLogResp)
	err := c.cc.Invoke(ctx, "/UserErrorService/GetUserLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserErrorServiceServer is the server API for UserErrorService service.
// All implementations must embed UnimplementedUserErrorServiceServer
// for forward compatibility
type UserErrorServiceServer interface {
	SaveUserLogs(context.Context, *UserErrorRequest) (*UserErrorResponse, error)
	GetUserLogs(context.Context, *Null) (*UserLogResp, error)
	mustEmbedUnimplementedUserErrorServiceServer()
}

// UnimplementedUserErrorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserErrorServiceServer struct {
}

func (UnimplementedUserErrorServiceServer) SaveUserLogs(context.Context, *UserErrorRequest) (*UserErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserLogs not implemented")
}
func (UnimplementedUserErrorServiceServer) GetUserLogs(context.Context, *Null) (*UserLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLogs not implemented")
}
func (UnimplementedUserErrorServiceServer) mustEmbedUnimplementedUserErrorServiceServer() {}

// UnsafeUserErrorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserErrorServiceServer will
// result in compilation errors.
type UnsafeUserErrorServiceServer interface {
	mustEmbedUnimplementedUserErrorServiceServer()
}

func RegisterUserErrorServiceServer(s grpc.ServiceRegistrar, srv UserErrorServiceServer) {
	s.RegisterService(&UserErrorService_ServiceDesc, srv)
}

func _UserErrorService_SaveUserLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserErrorServiceServer).SaveUserLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserErrorService/SaveUserLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserErrorServiceServer).SaveUserLogs(ctx, req.(*UserErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserErrorService_GetUserLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserErrorServiceServer).GetUserLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserErrorService/GetUserLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserErrorServiceServer).GetUserLogs(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// UserErrorService_ServiceDesc is the grpc.ServiceDesc for UserErrorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserErrorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserErrorService",
	HandlerType: (*UserErrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserLogs",
			Handler:    _UserErrorService_SaveUserLogs_Handler,
		},
		{
			MethodName: "GetUserLogs",
			Handler:    _UserErrorService_GetUserLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/usererror.proto",
}
